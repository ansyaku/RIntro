[["index.html", "NULL dan NA Selamat Datang di Semua Tentang R", " NULL dan NA Andreas Syaloom Kurniawan 4/24/2021 Selamat Datang di Semua Tentang R Berikut adalah laman untuk mengakses kode sumber: website for Text Mining with R! Visit the GitHub repository for this site, find the book at OReilly, or buy it on Amazon. This work by Andreas Syaloom Kurniawan is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. "],["pengantar.html", "Pengantar", " Pengantar Ini merupakan kertas buram, belum selesai di edit. Baru diupload saja di internet (25/04/2021), rencana akan dirapihkan agar bisa menjadi dokumentasi pembelajaran r. Jadi, ini merupakan live document. Mengapa kumpulan kertas buram ini dibuat? Bukankah sudah sangat banyak tutorial R di internet, bahkan lebih lengkap! Ya, anda benar sekali. Memang semuanya sudah tersedia di internet. Namun, masalahnya adalah tiap environtment itu berbeda, sama-sama menggunakan R Studio dan menjalankan perintah install.package(tidyverse), tidak semua berhasil. Pengalaman saya menggunakan R menunjukkan ada paket (selanjutnya paket=package) yang tidak kompatibel dengan versi r, ada yang paketnya tidak mau disimpan ke lokal kita. Ada banyak sekali variasi. Untuk itulah, dokumentasi ini saya buat. Pertama, sebagai dokumentasi pembelajaran R saya. Kedua, sebagai log atas error-error tadi, agar saya tidak perlu mencari ulang solusi dari tiap-tiap masalah. Oh iya, kadang di buku ini Bahasa Inggris, kadang bahasa Indonesia. Ini tidak dilakukan secara sengaja, melainkan ini merupakan pembelajaran saya dalam kurun waktu 2 bulan. Kadang ketika saya ingin pakai EN ya saya tulis dalam EN. Semoga bermanfaat bagi saya dan bagi orang-orang lain yang membaca. Jakarta, 25 April 2020 midnight. "],["settingan-di-r.html", "Bab 1 Settingan di R 1.1 Package 1.2 Dependencies 1.3 IR Kernel 1.4 Changing Root Folder 1.5 Installing other package", " Bab 1 Settingan di R You can compile R code using R Studio, PyCharm, or using Jupyter Notebook that has been installed with IRKernel. 1.1 Package Some package is updated by the author on regular basis in their github repo. Its often that - when one author update his package (package x) (and the most update version has not available on CRAN repo), he use the updated version to update another r package (package y). This condition lead to an awkward condition, specially when package y has been available on CRAN, you take it to your project and after you install it, the system notify that you need package x to install package y. Meanwhile, package x has not been available in CRAN/conda/conda-forge. 1.2 Dependencies Its normal if you want to install your package as soon as possible, but at the end of the day it can turn to a nightmare if you dont read the documentation of the package first. You must uninstall your package, kernel, or even anaconda. 1.3 IR Kernel If you use R from Jupyter Notebook, then the best way to install IR Kernel is using the procedure written in IR Kernel github. See: https://irkernel.github.io/installation/ To make it easier i copied and pasted the command here. Install R Studio Open your r studio, no need to open your jupyter first. Run this code on the console. install.packages(&#39;IRkernel&#39;) Make the kernel available for jupyter Again use your console to run this command #for the current user only IRkernel::installspec() #for all user IRkernel::installspec(user = FALSE) To know which r kernel are you use, you can use this command: sessionInfo() 1.4 Changing Root Folder Open cmd (or Anaconda Prompt) and run jupyter notebook --generate-config. This writes a file to C:\\Users\\username\\.jupyter\\jupyter_notebook_config.py. Browse to the file location and open it in an Editor Search for the following line in the file: #c.NotebookApp.notebook_dir = &#39;&#39; Replace by c.NotebookApp.notebook_dir = &#39;/the/path/to/home/folder/&#39; 1.5 Installing other package Cek dokumentasi di cran versi terakhir versi berapa. Untuk install dari cran yang spesifik gunakan perintah sbb: install.packages(&quot;tidyverse&quot;, repos=&#39;https://cloud.r-project.org/&#39;) Waffle install.packages(&quot;waffle&quot;, repos = &quot;https://cinc.rud.is&quot;) "],["membaca-data.html", "Bab 2 Membaca Data 2.1 Perolehan Data dari Internet 2.2 Perintah Read Tabel 2.3 Perintah Read CSV", " Bab 2 Membaca Data read.table, read.csv untuk membaca data tabular (read.csv identik dengan read.table kecuali separatornya adalah koma sedangkan read.table separatornya spasi). readLines untuk membaca baris per baris pada file teks source untuk membaca file R code (inverse of dump) dget untuk membaca file R code (inverse of dput) load untuk membaca pada workspace yang disimpan unserialize untuk membaca satu R objek dalam bentuk biner Argumen-argumen pada fungsi read.table: * file, nama fie/koneksi * header, logikal mengindikasikan apakah file memiliki baris header * sep * colClasses * nrows, jumlah baris pada dataset * comment.char * skip, jumlah baris yang dilewatkan dari awal * stringsAsFactors Jika besar dataset&gt; besar RAM gak usah dilanjutin. x&lt;-c(&quot;Kabanjahe&quot;,&quot;Medan&quot;,&quot;Siantar&quot;, &quot;Samosir&quot;,&quot;Balige&quot;,&quot;Labuhan Batu&quot;,&quot;Padang Sidempuan&quot;,&quot;Rantau Prapat&quot;) y&lt;-list(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,TRUE,FALSE) z&lt;-c(1,2,3,4,5,6,7,8,9,0) dump(c(&quot;x&quot;,&quot;y&quot;,&quot;z&quot;), file=&quot;contoh_file_dump.R&quot;) Koneksi ke file: *** file membuka koneksi ke file gzfile membuka koneksi ke file yang dikompres dalam bentuk gzip bzfile membuka koneksi ke file yang dikompres dalam bentuk bzip2 url membuka koneksi ke webpage #con&lt;-file() #data&lt;-read.csv() #close(con) library(help=&quot;datasets&quot;) head(ChickWeight) ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 Consider the data set ice.river, which is in the contributed package tseries by Trapletti and Hornik (2013). First, you have to install the package, which you can do by running the line install.packages(tseries) #install.packages(&quot;tseries&quot;) #library(&quot;tseries&quot;) #library(help=&quot;tseries&quot;) #data&lt;-read.csv(&quot;MRI.csv&quot;, header=FALSE) #head(data) # data.url&lt;-read.table(&quot;http://courses.washington.edu/b517/Datasets/BirthsKingCounty2001.txt&quot;, fill = TRUE) # head(data.url, n=2) 2.1 Perolehan Data dari Internet Penting untuk diperhatikan: Perolehan data dari internet secara langsung menghindarkan kita dari kesalahan ketik data (bila harus diketik ulang). Namun, penting untuk diingat data dari internet bisa berubah-ubah untuk itu perlu untuk membuat catatan data yang diperoleh itu diambil per kapan. Adapun cara untuk mengambil data dari internet secara langsung adalah sebagai berikut: # Cari url dimana data tersedia, setelah itu gunakan perintah browseURL # untuk memastikan bahwa perangkat anda terkoneksi ke internet dan link unduh data tersebut berfungsi # perintah ini akan membuka jendela baru # browseURL(&quot;https://archive.ics.uci.edu/ml/&quot;) # Gunakan perintah download.file(url, nama text file yang mau disimpan) untuk mengunduh data langsung ke folder root # web=&quot;https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data&quot; # download.file(web, &quot;Testing.txt&quot;) 2.2 Perintah Read Tabel #read.table(&quot;file&quot;, # header = FALSE, # sep = &quot;&quot;, # quote = &quot;\\&quot;&#39;&quot;, # dec = &quot;.&quot;, # row.names, col.names, # na.strings = &quot;NA&quot;, # fill = !blank.lines.skip, # skipNul = FALSE) Beberapa yang penting: filename - Nama file sep - pemisah antar kolom skipNul tipe: logical: , apakah kolom berisi NULL diabaikan fill tipe: logical. If TRUE then in case the rows have unequal length, blank fields are implicitly added. See Details. nrows integer: jumlah baris yang ingin dibaca na.strings a character vector of strings which are to be interpreted as NA values. Blank fields are also considered to be missing values in logical, integer, numeric and complex fields. Note that the test happens after white space is stripped from the input, so na.strings values may need their own white space stripped in advance. col.names vektor yang berisikan nama (opsional) bagi variabel. dec karakter yang digunakan sebagai pemisah untuk desimal 2.3 Perintah Read CSV # read_csv( # &quot;filename&quot;, # sep = &quot;,&quot;, # na.strings = c(&quot;NA&quot;, &quot;-&quot;), # comment.char = &quot;#&quot;, # transpose = FALSE, # rownames_included = TRUE #) Keterangan : filename - Nama file sep - pemisah antar kolom na.string - na mau diganti apa transpose rownames_included "],["menggunakan-readr-dan-fread.html", "Bab 3 Menggunakan readr dan fread 3.1 readr 3.2 fread", " Bab 3 Menggunakan readr dan fread 3.1 readr Readr merupakan salah satu paket (bisa digunakan dengan memanggil readr atau memanggil tidyverse). read_delim( file, delim, quote = &quot;\\&quot;&quot;, escape_backslash = FALSE, escape_double = TRUE, col_names = TRUE, col_types = NULL, locale = default_locale(), na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, comment = &quot;&quot;, trim_ws = FALSE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = show_progress(), skip_empty_rows = TRUE ) read_csv( file, col_names = TRUE, col_types = NULL, locale = default_locale(), na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = show_progress(), skip_empty_rows = TRUE ) Tidak perlu menspesifikasi lagi header=TRUE, stringsAsFactor=TRUE, karena secara defaul readr sudah mengakomodasi itu. Readr akan mengkonversi data ke dalam bentuk tibble. library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.3 v purrr 0.3.4 ## v tibble 3.1.1 v dplyr 1.0.5 ## v tidyr 1.1.3 v stringr 1.4.0 ## v readr 1.4.0 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() mtcars &lt;- read_csv(readr_example(&quot;mtcars.csv&quot;)) ## ## -- Column specification -------------------------------------------------------- ## cols( ## mpg = col_double(), ## cyl = col_double(), ## disp = col_double(), ## hp = col_double(), ## drat = col_double(), ## wt = col_double(), ## qsec = col_double(), ## vs = col_double(), ## am = col_double(), ## gear = col_double(), ## carb = col_double() ## ) Dapat dilihat, saat kita memanggil suatu data dengan readr (read_csv), maka akan ditampilkan tipe dari setiap kolom yang ada. Selain itu, kita bisa juga melakukan skip terhadap baris ke sekian hingga sekian, misalkan ambil dari baris ke 7 hingga 17. Ini dilakukan dengan parameter skip dan n_max. mtcars &lt;- read_csv(&quot;mtcars.csv&quot;, skip = 2, n_max = 17) ## Warning: Duplicated column names deduplicated: &#39;4&#39; =&gt; &#39;4_1&#39; [12] ## ## -- Column specification -------------------------------------------------------- ## cols( ## `Mazda RX4 Wag` = col_character(), ## `21` = col_double(), ## `6` = col_double(), ## `160` = col_double(), ## `110` = col_double(), ## `3.9` = col_double(), ## `2.875` = col_double(), ## `17.02` = col_double(), ## `0` = col_double(), ## `1` = col_double(), ## `4` = col_double(), ## `4_1` = col_double() ## ) head(mtcars) ## # A tibble: 6 x 12 ## `Mazda RX4 Wag` `21` `6` `160` `110` `3.9` `2.875` `17.02` `0` `1` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 ## 2 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 ## 3 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 ## 4 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 ## 5 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 ## 6 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 ## # ... with 2 more variables: 4 &lt;dbl&gt;, 4_1 &lt;dbl&gt; Ada beberapa macam perintah pemanggilan yang dapat digunakan untuk readr, antara lain: # fungsinya mirip dengan read.delim di base r read_delim # fungsinya mirip dengan read.csv di base r read_csv # untuk mebaca tab separated value read_tsv 3.2 fread fread ditulis oleh Matt Dowle dan Arun Srinivasan. Fread dapat dilihat pada https://github.com/Rdatatable/data.table fread(input, file, text, cmd, sep=&quot;auto&quot;, sep2=&quot;auto&quot;, dec=&quot;.&quot;, quote=&quot;\\&quot;&quot;, nrows=Inf, col.names, check.names=FALSE, encoding=&quot;unknown&quot;, strip.white=TRUE, fill=FALSE, blank.lines.skip=FALSE) # lengkapnya bs dilihat di dokumentasi fread Fread dapat dipanggil dengan: library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose k22&lt;-fread(&quot;mtcars.csv&quot;, nrows=5) head(k22) ## model mpg cyl disp hp drat wt qsec vs am gear carb ## 1: Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2: Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3: Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4: Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5: Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 "],["vektor.html", "Bab 4 Vektor 4.1 Membuat Vector 4.2 Operasi aritmatika vector 4.3 Coercion", " Bab 4 Vektor Vektor adalah struktur data (data structure) paling sederhana di R. Vektor secara singkat dapat disebut sebagai kumpulan data-data (disebut sbg: elemen) dengan tipe yang sama. Artinya, kalau numerik maka didalam suatu vektor semuanya harus numerik, kalau karakter harus karakter semua. Nilai-nilai di dalam vektor disimpan secara berurutan sesuai dengan daftar yang kita buat. Terdapat beberapa jenis vektor: 1. Vektor Numeric mengandung data-data bertipe bilangan riil. 1. Vektor Integer, mengandung data-data bertipe bilangan bulat. 1. Vektor Logical, mengandung data-data kebenaran (TRUE and/or FALSE) 1. Vektor Character, mengandung data-data bertipe teks 1. Vektor Datetime, mengandung data-data bertipe waktu dan tanggal. 1. Vektor Factors, a special type of vector to work with categories. Dengan menggunakan metode c(), kita bisa mengkoleksi semua argumen-argumen untuk membentuk vektor. Seluruh argumen akan dideduksi menjadi satu tipe data bersama, atribut lain selain nama akan dihapus. WARNING!!! Vektor disini jangan dikacaukan dengan vektor matematika. Vektor di R tidak ada row dan kolomnya. 4.1 Membuat Vector Membuat vector yang bertipe bilangan bulat. Di contoh ini, kita buat suatu vector bernama rv, menggunakan fungsi c(), dan melist anggotnya. rv&lt;-c(2, 1, 1, 2) rv length(rv) typeof(rv) ## [1] 2 1 1 2 ## [1] 4 ## [1] &quot;double&quot; rx&lt;-c(1,2,3,4,5,6) rx typeof(rx) ## [1] 1 2 3 4 5 6 ## [1] &quot;double&quot; Membuat vektor berseri, dimulai dari 3 (elemen pertama) hingga maksimum 5 (elemen terakhir) dengan penambahan sebesar 1,75 setiap elememennya. seq(3,5, by=1.75) -&gt;rz rz typeof(rz) #sekaligus cek tipe vektor length(rz) #sekaligus cek panjang vektor ## [1] 3.00 4.75 ## [1] &quot;double&quot; ## [1] 2 Membuat vektor yang mirip dengan rz namun disini, dimulai dari 7, minimum 1, dengan faktor pengurang -1. seq(7,1, by=-1) -&gt;ra ra typeof(ra) length(ra) ## [1] 7 6 5 4 3 2 1 ## [1] &quot;double&quot; ## [1] 7 Vektor yang elemennya bertipe boolean rb&lt;-c(TRUE, FALSE, TRUE, FALSE, FALSE) rb typeof(rb) length(rb) ## [1] TRUE FALSE TRUE FALSE FALSE ## [1] &quot;logical&quot; ## [1] 5 Vektor yang elemennya bertipe character rc&lt;-c(&quot;Ibu&quot;,&quot;Ayah&quot;,&quot;Adik&quot;,&quot;Kakak&quot;) rc typeof(rc) str(rc) length(rc) ## [1] &quot;Ibu&quot; &quot;Ayah&quot; &quot;Adik&quot; &quot;Kakak&quot; ## [1] &quot;character&quot; ## chr [1:4] &quot;Ibu&quot; &quot;Ayah&quot; &quot;Adik&quot; &quot;Kakak&quot; ## [1] 4 Membuat vector dari dua buah vector: va&lt;- c(2, 3, 5) vb&lt;- c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) vc&lt;-c(va, vb) vc ## [1] &quot;2&quot; &quot;3&quot; &quot;5&quot; &quot;aa&quot; &quot;bb&quot; &quot;cc&quot; &quot;dd&quot; &quot;ee&quot; 4.2 Operasi aritmatika vector Unsur-unsur di dalam vector dapat dioperasikan satu sama lain sehingga menghasilkan vector juga. #Vektor rw yang elemennya merupakan rw=2rx+1 rw&lt;-2*rx+1 rw typeof(rw) length(rw) ## [1] 3 5 7 9 11 13 ## [1] &quot;double&quot; ## [1] 6 ve&lt;-rep(c(1, 1, 2), times = 3) ve ## [1] 1 1 2 1 1 2 1 1 2 typeof(ve) ## [1] &quot;double&quot; length(ve) ## [1] 9 vf&lt;-rep(c(1, 7, 2), each = 3) vf ## [1] 1 1 1 7 7 7 2 2 2 typeof(vf) ## [1] &quot;double&quot; length(vf) ## [1] 9 vg&lt;-rep(c(3, 9), times = c(1,4)) vg ## [1] 3 9 9 9 9 typeof(vg) ## [1] &quot;double&quot; length(vg) ## [1] 5 vh&lt;-rep(5:7,length.out=13) vh ## [1] 5 6 7 5 6 7 5 6 7 5 6 7 5 typeof(vh) ## [1] &quot;integer&quot; length(vh) ## [1] 13 4.3 Coercion Peraturan coercion: Logical values are converted to numbers: TRUE is converted to 1 and FALSE to 0. Values are converted to the simplest type required to represent all information. The ordering is roughly logical &lt; integer &lt; numeric &lt; complex &lt; character &lt; list. Objects of type raw are not converted to other types. Object attributes are dropped when an object  Misalkan kita memiliki sebuah vektor berisi integer vl&lt;-1:10 vl typeof(vl) class(vl) ## [1] 1 2 3 4 5 6 7 8 9 10 ## [1] &quot;integer&quot; ## [1] &quot;integer&quot; Kita ubah jadi tipe logic, as.logical(vl) vl ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [1] 1 2 3 4 5 6 7 8 9 10 Kita ubah jadi bentuk double: as.double(vl) vl ## [1] 1 2 3 4 5 6 7 8 9 10 ## [1] 1 2 3 4 5 6 7 8 9 10 Kita ubah jadi bentuk karakter: as.character(vl) vl typeof(vl) class(vl) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; ## [1] 1 2 3 4 5 6 7 8 9 10 ## [1] &quot;integer&quot; ## [1] &quot;integer&quot; vm&lt;-c(&quot;beng&quot;,&quot;ate&quot;,&quot;guntur&quot;, &quot;angan&quot;, &#39;serser&#39;) vm ## [1] &quot;beng&quot; &quot;ate&quot; &quot;guntur&quot; &quot;angan&quot; &quot;serser&quot; #Pemanggilan vektor dimulai dari elemen nomor 1 (tidak ada elemen 0) vm[1] ## [1] &quot;beng&quot; #Panggil selain vm[-1] ## [1] &quot;ate&quot; &quot;guntur&quot; &quot;angan&quot; &quot;serser&quot; vm[-2] ## [1] &quot;beng&quot; &quot;guntur&quot; &quot;angan&quot; &quot;serser&quot; vm[[1]] ## [1] &quot;beng&quot; # memanggil suku ke n dan n+k vm[c(1,3)] ## [1] &quot;beng&quot; &quot;guntur&quot; # memanggil suku ke n hingga n+k vm[c(1:3)] ## [1] &quot;beng&quot; &quot;ate&quot; &quot;guntur&quot; vm&gt;&#39;beng&#39; ## [1] FALSE FALSE TRUE FALSE TRUE # Ini kenapa? vm[vm&gt;&#39;beng&#39;] ## [1] &quot;guntur&quot; &quot;serser&quot; # Subseting kondisional vn&lt;-c(1:11) vn ## [1] 1 2 3 4 5 6 7 8 9 10 11 vn[vn&gt;5] ## [1] 6 7 8 9 10 11 vo &lt;- list(a = c(3, 2, 0), b = 787, c = &quot;Airbus 320&quot;) vo ## $a ## [1] 3 2 0 ## ## $b ## [1] 787 ## ## $c ## [1] &quot;Airbus 320&quot; vo[-2] ## $a ## [1] 3 2 0 ## ## $c ## [1] &quot;Airbus 320&quot; vo ## $a ## [1] 3 2 0 ## ## $b ## [1] 787 ## ## $c ## [1] &quot;Airbus 320&quot; vo ## $a ## [1] 3 2 0 ## ## $b ## [1] 787 ## ## $c ## [1] &quot;Airbus 320&quot; vo[2]&lt;-NULL vo ## $a ## [1] 3 2 0 ## ## $c ## [1] &quot;Airbus 320&quot; vo[3]&lt;-4 vo ## $a ## [1] 3 2 0 ## ## $c ## [1] &quot;Airbus 320&quot; ## ## [[3]] ## [1] 4 vo[c(2,3)]=NULL vo ## $a ## [1] 3 2 0 # Pembuktian bahwa vektor menyimpan elemen secara berurutan: urt1&lt;-c(&quot;Kambing&quot;, &quot;Ayam&quot;, &quot;Ikan&quot;, &quot;Itik&quot;) urt2&lt;-c(&quot;Ikan&quot;,&quot;Kambing&quot;, &quot;Ayam&quot;, &quot;Itik&quot;) urt3&lt;-c(&quot;Kambing&quot;, &quot;Ayam&quot;, &quot;Ikan&quot;, &quot;Itik&quot;) #Vektor 1 dan 3 dianggap sama karena memiliki susunan dan isi yang benar-benar sama all(urt1==urt3) ## [1] TRUE urt1==urt3 ## [1] TRUE TRUE TRUE TRUE #Vektor 2 dan 3 tidak dianggap sama karena memiliki susunan berbeda walaupun terdiri atas elemen yang benar-benar sama all(urt1==urt2) ## [1] FALSE urt1==urt2 ## [1] FALSE FALSE FALSE TRUE "],["list.html", "Bab 5 LIST 5.1 Membuat List 5.2 Memberi Nama Elemen List 5.3 Mengakses List 5.4 Memanipulasi Isi List", " Bab 5 LIST Vektor yang semua elemennya memiliki tipe data yang sama disebut atomic vector, . List mirip dengan vektor namun elemen-elemennya boleh terdiri dari beberapa tipe data. 5.1 Membuat List ma&lt;-list(1,&#39;ayam&#39;, TRUE, 1+2i ) ma typeof(ma) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;ayam&quot; ## ## [[3]] ## [1] TRUE ## ## [[4]] ## [1] 1+2i ## ## [1] &quot;list&quot; Membuat list dengan series (barisan bilangan) mb&lt;-list(letters[1:3]) mb mc&lt;-list(1:7) mc ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## [[1]] ## [1] 1 2 3 4 5 6 7 Membuat list dengan series (barisan bilangan dengan faktor pertumbuhan tertentu) #Contoh: series dimulai dari 1 maksimum 11 dengan pertambahan 3 md&lt;-list(seq(1, 11, by=3)) md typeof(md) ## [[1]] ## [1] 1 4 7 10 ## ## [1] &quot;list&quot; List juga dapat dibuat dari vektor-vektor lain #List dapat dibuat dari 3 vektor integer, character, dan boolean me&lt;-c(1:3) typeof(me) mf&lt;-c(&quot;ayam&quot;,&quot;ikan&quot;,&quot;tempe&quot;,&quot;tahu&quot;) mg&lt;-c(TRUE, FALSE, TRUE, TRUE) mh&lt;-list(me,mf,mg) mh typeof(mh) ## [1] &quot;integer&quot; ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;ayam&quot; &quot;ikan&quot; &quot;tempe&quot; &quot;tahu&quot; ## ## [[3]] ## [1] TRUE FALSE TRUE TRUE ## ## [1] &quot;list&quot; List dapat dibuat dari list-list lain (merging list) mi&lt;-list(&#39;dolar&#39;,&#39;yen&#39;,&#39;rupiah&#39;,&#39;renmimbi&#39;) mj&lt;-list(14000,3500,14300,350) mk&lt;-list(mi,mj) mk typeof(mk) ## [[1]] ## [[1]][[1]] ## [1] &quot;dolar&quot; ## ## [[1]][[2]] ## [1] &quot;yen&quot; ## ## [[1]][[3]] ## [1] &quot;rupiah&quot; ## ## [[1]][[4]] ## [1] &quot;renmimbi&quot; ## ## ## [[2]] ## [[2]][[1]] ## [1] 14000 ## ## [[2]][[2]] ## [1] 3500 ## ## [[2]][[3]] ## [1] 14300 ## ## [[2]][[4]] ## [1] 350 ## ## ## [1] &quot;list&quot; 5.2 Memberi Nama Elemen List # MEMBERI NAMA LIST # Pada list ini elemen list diberi nama gt, rt, dan nt ml &lt;- list(sibirong = matrix(1:6, nrow = 2), sibontar = letters[3:5], sigerger = c(1:5)) ml ## $sibirong ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 ## ## $sibontar ## [1] &quot;c&quot; &quot;d&quot; &quot;e&quot; ## ## $sigerger ## [1] 1 2 3 4 5 names(ml) ## [1] &quot;sibirong&quot; &quot;sibontar&quot; &quot;sigerger&quot; mm&lt;- list(a=&quot;one&quot;, b=&quot;two&quot;, c=c(1:3)) names(mm) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; #Melakukan assign nama dengan jumlah yang sama dengan jumlah nama awal names(mm) &lt;- c(&quot;sada&quot;, &quot;dua&quot;, &quot;tolu&quot;) print(mm) ## $sada ## [1] &quot;one&quot; ## ## $dua ## [1] &quot;two&quot; ## ## $tolu ## [1] 1 2 3 mn&lt;- list(&quot;bata&quot;,&quot;carvil&quot;,letters[1:3]) print(mn) ## [[1]] ## [1] &quot;bata&quot; ## ## [[2]] ## [1] &quot;carvil&quot; ## ## [[3]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; names(mn) ## NULL #Melakukan assign nama ke satu list, dengan jumlah anggota sama dengan nama names(mn)&lt;-c(&quot;par&quot;,&quot;pir&quot;,&quot;per&quot;) print(mn) ## $par ## [1] &quot;bata&quot; ## ## $pir ## [1] &quot;carvil&quot; ## ## $per ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; #Melakukan assign nama ke satu list, dengan jumlah nama kurang dari jumlah anggota names(mn)&lt;-c(&quot;psr&quot;,&quot;ptr&quot;) print(mn) ## $psr ## [1] &quot;bata&quot; ## ## $ptr ## [1] &quot;carvil&quot; ## ## $&lt;NA&gt; ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; names(mn) ## [1] &quot;psr&quot; &quot;ptr&quot; NA #Melakukan assign nama ke satu list, dengan jumlah nama lebih dari jumlah anggota [FAILED] #names(mn)&lt;-c(&quot;psr&quot;,&quot;ptr&quot;,&quot;ppr&quot;,&quot;pkr&quot;) #print(mn) #names(mn) 5.3 Mengakses List Misalkan terdapat suatu list mo&lt;-list(&quot;kuda&quot;,&#39;ayam&#39;,&#39;anjing&#39;,&#39;babi&#39;) mp&lt;-list(a=&quot;kuda&quot;, b=x&lt;-c(1,2,3), c=&quot;TRUE&quot;) str(mo) str(mp) ## List of 4 ## $ : chr &quot;kuda&quot; ## $ : chr &quot;ayam&quot; ## $ : chr &quot;anjing&quot; ## $ : chr &quot;babi&quot; ## List of 3 ## $ a: chr &quot;kuda&quot; ## $ b: num [1:3] 1 2 3 ## $ c: chr &quot;TRUE&quot; Mengakses elemen kedua dari list #mengakses elemen kedua mo[2] mp[2] ## [[1]] ## [1] &quot;ayam&quot; ## ## $b ## [1] 1 2 3 mo[[2]] ## [1] &quot;ayam&quot; mp[[2]] ## [1] 1 2 3 Mengakses elemen k hingga ke n+k mo[c(1,4)] mp[c(1,2)] ## [[1]] ## [1] &quot;kuda&quot; ## ## [[2]] ## [1] &quot;babi&quot; ## ## $a ## [1] &quot;kuda&quot; ## ## $b ## [1] 1 2 3 #Bagaimana mengakses isi list yang ada di dalam list ? 5.4 Memanipulasi Isi List x[[2]][1]=&#39;susu&#39; x ## [1] &quot;1&quot; &quot;susu&quot; &quot;3&quot; x[c(2, 4)] ## [1] &quot;susu&quot; NA print(x) ## [1] &quot;1&quot; &quot;susu&quot; &quot;3&quot; print(x[2]) ## [1] &quot;susu&quot; #ka$gt&lt;-list(&#39;7&#39;,&#39;1&#39;,&#39;7&#39;,&#39;1&#39;,&#39;6&#39;) #ka # Cara lain memberi nama gt, rt, dan nt #ka &lt;- list(matrix(1:6, nrow = 2), # letters[3:5], # c(1:5)) #names(ka) &lt;- c(&quot;Maruhum&quot;, &quot;Bonar&quot;, &quot;Sirait&quot;) #ka #Add an element at the end of the list. #ka[4] &lt;- list(&quot;Nubie&quot;,&quot;Bontar Muka&quot;, &quot;Kumis Bolon&quot;) #ka #Converting List to Vector #modify a list in R? # Add element at the end of the list. #list_data[4] &lt;- &quot;New element&quot; #print(list_data[4]) # Remove the last element. #list_data[4] &lt;- NULL # Print the 4th Element. #print(list_data[4]) # Update the 3rd Element. Subsetting *** x&lt;-c(&#39;Miami&#39;,&quot;Chicago&quot;, &quot;New York&quot;, &quot;Massacushets&quot;) x[2] ## [1] &quot;Chicago&quot; x[1:3] ## [1] &quot;Miami&quot; &quot;Chicago&quot; &quot;New York&quot; x[x&gt;&quot;Chicago&quot;] ## [1] &quot;Miami&quot; &quot;New York&quot; &quot;Massacushets&quot; y&lt;-list(makrobar=1:6, bar=0.7) y ## $makrobar ## [1] 1 2 3 4 5 6 ## ## $bar ## [1] 0.7 y[1] ## $makrobar ## [1] 1 2 3 4 5 6 y[2] ## $bar ## [1] 0.7 y[[&quot;makrobar&quot;]] ## [1] 1 2 3 4 5 6 y ## $makrobar ## [1] 1 2 3 4 5 6 ## ## $bar ## [1] 0.7 "],["factor.html", "Bab 6 Factor", " Bab 6 Factor Digunakan untuk merepresentasikan data kategorikal atau ordinal. * Factor bisa unordered atau ordered. * Factor ini menyimpan informasi lain disebut Levels yang merupakan informasi elemen unik yang ada pada factor beserta urutannya. Factor bisa dibayangkan sebagai vector integer yang memiliki label. fa&lt;-factor(c(&quot;iya&quot;,&quot;enggak&quot;,&quot;enggak&quot;,&quot;enggak&quot;,&quot;iya&quot;,&quot;enggak&quot;,&quot;iya&quot;)) fa ## [1] iya enggak enggak enggak iya enggak iya ## Levels: enggak iya Perhatikan level nya, hanya ada dua yakni iya dan enggak. Apabila kita ingin mengetahui rekapan dari isi faktor bisa menggunakan perintah berikut: table(fa) ## fa ## enggak iya ## 4 3 Kategori yang ada pada level tersebut sebenarnya disimpan dalam bentuk integer, seperti bisa dilihat pada hasil panggilan berikut: unclass(fa) # iya disimbolkan sebagai 2, enggak sebagai 1 ## [1] 2 1 1 1 2 1 2 ## attr(,&quot;levels&quot;) ## [1] &quot;enggak&quot; &quot;iya&quot; #attr(,&quot;levels&quot;) Kita bisa menentukan levelnya, siapa yang pertama siapa yang kedua, dst. Hal ini dilakukan dengan mendefinisikan level, sbb: fb&lt;-factor(c(&quot;iya&quot;,&quot;enggak&quot;,&quot;enggak&quot;,&quot;enggak&quot;,&quot;iya&quot;,&quot;enggak&quot;,&quot;iya&quot;), levels=c(&quot;iya&quot;,&quot;enggak&quot;)) fb ## [1] iya enggak enggak enggak iya enggak iya ## Levels: iya enggak unclass(fb) ## [1] 1 2 2 2 1 2 1 ## attr(,&quot;levels&quot;) ## [1] &quot;iya&quot; &quot;enggak&quot; # Jika levelsnya ditentukan, maka yang pertama akan dikoding menjadi lebih awal dari yang kedua fa1&lt;-factor(c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;SMP&quot;), levels=c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;)) fa2&lt;-factor(c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;SMP&quot;), levels=c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;PT&quot;)) fa3&lt;-factor(c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;SMP&quot;, &quot;SD&quot;, &quot;SD&quot;,&quot;SMA&quot;,&quot;SD&quot;), levels=c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;PT&quot;), ordered=TRUE) fa1 ## [1] SD SMP SMA SMP ## Levels: SD SMP SMA # Kita bisa menambah levels walaupun data terkait levels itu belum ada, # fungsinya kita bisa saja suatu saat menambah anggota fa2 tanpa perlu mengubah levels fa2 ## [1] SD SMP SMA SMP ## Levels: SD SMP SMA PT #Di sini levels telah berurut fa3 ## [1] SD SMP SMA SMP SD SD SMA SD ## Levels: SD &lt; SMP &lt; SMA &lt; PT "],["matrices.html", "Bab 7 Matrices 7.1 2. Subsetting a Matrix", " Bab 7 Matrices ma&lt;-matrix(nrow=2, ncol=3) ma ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA dim(ma) ## [1] 2 3 mb&lt;-matrix(3:8, nrow=2, ncol=3) mb ## [,1] [,2] [,3] ## [1,] 3 5 7 ## [2,] 4 6 8 dim(mb) ## [1] 2 3 mc&lt;- 3:12 mc ## [1] 3 4 5 6 7 8 9 10 11 12 class(mc) ## [1] &quot;integer&quot; dim(mc)&lt;-c(5,2) mc ## [,1] [,2] ## [1,] 3 8 ## [2,] 4 9 ## [3,] 5 10 ## [4,] 6 11 ## [5,] 7 12 class(mc) ## [1] &quot;matrix&quot; &quot;array&quot; md&lt;- 3:12 md ## [1] 3 4 5 6 7 8 9 10 11 12 class(md) ## [1] &quot;integer&quot; dim(md)&lt;-c(2,5) md ## [,1] [,2] [,3] [,4] [,5] ## [1,] 3 5 7 9 11 ## [2,] 4 6 8 10 12 class(md) ## [1] &quot;matrix&quot; &quot;array&quot; ga&lt;-2:4 gi&lt;--1:-3 me&lt;-cbind(ga,gi) me ## ga gi ## [1,] 2 -1 ## [2,] 3 -2 ## [3,] 4 -3 class(me) ## [1] &quot;matrix&quot; &quot;array&quot; mf&lt;-rbind(ga,gi) mf ## [,1] [,2] [,3] ## ga 2 3 4 ## gi -1 -2 -3 class(mf) ## [1] &quot;matrix&quot; &quot;array&quot; 7.1 2. Subsetting a Matrix Ketika matrix disubset maka yang dihasilkan adalah vector dengan panjang 1, bukan matriks. mg&lt;-matrix(1:6,2,3) mg ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 mg[2,3] ## [1] 6 mg[2,] ## [1] 2 4 6 mg[,3] ## [1] 5 6 y&lt;-mg[2,2] class(y) ## [1] &quot;integer&quot; #Subsetting dengan tetap mempertahankan bentuk matrix y&lt;-mg[2,2, drop=FALSE] z&lt;-mg[1, , drop=FALSE] u&lt;-mg[,1 , drop=FALSE] y ## [,1] ## [1,] 4 class(y) ## [1] &quot;matrix&quot; &quot;array&quot; z ## [,1] [,2] [,3] ## [1,] 1 3 5 class(z) ## [1] &quot;matrix&quot; &quot;array&quot; u ## [,1] ## [1,] 1 ## [2,] 2 class(u) ## [1] &quot;matrix&quot; &quot;array&quot; "],["array.html", "Bab 8 Array", " Bab 8 Array Array adalah vektor multidimensional. Semua elemennya harus berasal dari tipe yang sama. Perbedaan array dan matrice adalah matrice hanya dapat digunakan dua dimensi. aa&lt;-array(1:24, dim=c(2,3,4)) aa ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 7 9 11 ## [2,] 8 10 12 ## ## , , 3 ## ## [,1] [,2] [,3] ## [1,] 13 15 17 ## [2,] 14 16 18 ## ## , , 4 ## ## [,1] [,2] [,3] ## [1,] 19 21 23 ## [2,] 20 22 24 class(aa) ## [1] &quot;array&quot; "],["fungsi-sprintf.html", "Bab 9 Fungsi Sprintf", " Bab 9 Fungsi Sprintf sprintf(&quot;Hachi suka makan %s, karena dia benci %s&quot;,&quot;Kucing&quot;, &quot;Monyet&quot;) ## [1] &quot;Hachi suka makan Kucing, karena dia benci Monyet&quot; sprintf(&quot;%s suka makan %s, karena dia benci %s&quot;,&quot;Kakaktua&quot;, &quot;Tahu&quot;, &quot;Tempe&quot;) ## [1] &quot;Kakaktua suka makan Tahu, karena dia benci Tempe&quot; toktok&lt;-function(apaini, apaitu) { print(sprintf(&quot;%s suka makan %s&quot;, apaini, apaitu)) } toktok(&quot;Kucing&quot;, &quot;Telor Puyuh Rebus Warmindo&quot;) ## [1] &quot;Kucing suka makan Telor Puyuh Rebus Warmindo&quot; toktok(&quot;Bapak&quot;, &quot;makanan terlarang seperti sayap kelelawar&quot;) ## [1] &quot;Bapak suka makan makanan terlarang seperti sayap kelelawar&quot; # Nilai default tiktik&lt;-function(apaini, apaitu=&quot;goreng pisang&quot;) { print(sprintf(&quot;%s suka makan %s&quot;, apaini, apaitu)) } tiktik(&quot;Geronimo&quot;) ## [1] &quot;Geronimo suka makan goreng pisang&quot; #Fungsi dengan return ataupun tidak dengan return. #Fungsi dengan return biasanya fungsi yang menghasilkan list. kembalikan.ini&lt;-function(angka1, angka2){ angka1^2-angka2^2+1 } kembalikan.ini(4,3) ## [1] 8 kembalikan.itu&lt;-function(angka1, angka2){ return (angka1^2-angka2^2+1) } kembalikan.itu(4,3) ## [1] 8 # Fungsi do.call lakukan.ini&lt;-function(x,func=mean){ do.call(func,args=list(x)) } lakukan.ini(1:1000) ## [1] 500.5 angka&lt;-c(3,5,6,8,99,9,3,4,5) lakukan.ini(angka) ## [1] 15.77778 lakukan.ini(angka, sum) ## [1] 142 # nulis function juga gak mesti kurawal, bisa ke samping aja rumus_mean&lt;-function(x) sum(x)/length(x) nilai_math&lt;-c(5,6,7,8,90,3,2,4) rumus_mean(nilai_math) ## [1] 15.625 rumus_luas_lingkaran&lt;-function(r) (22/7)*r*r jejari&lt;-c(14) rumus_luas_lingkaran(jejari) ## [1] 616 #atau bisa menggunakan fungsi built in yang udah ada mean(nilai_math) ## [1] 15.625 "],["conditional.html", "Bab 10 Conditional", " Bab 10 Conditional Kondisikonal adalah "],["looping.html", "Bab 11 Looping", " Bab 11 Looping Loping adalah "],["loop.html", "Bab 12 LOOP", " Bab 12 LOOP n&lt;-31 fib&lt;-vector(&quot;numeric&quot;, length=n) fib[1]&lt;-1 fib[2]&lt;-1 for ( i in 3:n){ fib[i]&lt;-fib[i-1]+fib[i-2] } fib ## [1] 1 1 2 3 5 8 13 21 34 ## [10] 55 89 144 233 377 610 987 1597 2584 ## [19] 4181 6765 10946 17711 28657 46368 75025 121393 196418 ## [28] 317811 514229 832040 1346269 "],["data-frames.html", "Bab 13 Data Frames", " Bab 13 Data Frames Dataframes adalah tipe list khusus dimana seitap elemen dari list harus memiliki panjang yang sama. Setiap elemen dari list dapat dipandang sebagai sebuah kolom dan panjang dari setiap elemen sebagai baris. Berbeda dari matriks, dataframe bisa memuat berbagai kelas objek yang berbeda di setiap kolom. (Matriks mesti sama). Dataframes juga bisa di konversi menjadi matriks. # Membuat dataframes da&lt;-data.frame(mii=1:4, bar=c(T,T,T,F)) da ## mii bar ## 1 1 TRUE ## 2 2 TRUE ## 3 3 TRUE ## 4 4 FALSE db&lt;-data.frame(nama=c(&quot;air&quot;, &quot;minum&quot;, &quot;dalam&quot;, &quot;kemasan&quot;), kode=c(9,9,4,0)) db ## nama kode ## 1 air 9 ## 2 minum 9 ## 3 dalam 4 ## 4 kemasan 0 # Bisa juga dibuat dengan membuat definisi dulu, baru dibuat dengan data.frame() ga&lt;-10:6 gi&lt;--1:-5 gu&lt;-c(&quot;Indomarco&quot;,&quot;Prismatama&quot;,&quot;Jakarta&quot;,&quot;Indonesia&quot;,&quot;Didistribusikan&quot;) dc&lt;-data.frame(ga,gi,gu) dc ## ga gi gu ## 1 10 -1 Indomarco ## 2 9 -2 Prismatama ## 3 8 -3 Jakarta ## 4 7 -4 Indonesia ## 5 6 -5 Didistribusikan #jumlah baris nrow(dc) ## [1] 5 #jumlah kolom ncol(dc) ## [1] 3 #dimensi dim(dc) ## [1] 5 3 rownames(dc) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; #mengassign nama row rownames(dc)&lt;-c(&quot;sada&quot;,&quot;dua&quot;,&quot;telu&quot;,&quot;empat&quot;,&quot;lima&quot;) dc ## ga gi gu ## sada 10 -1 Indomarco ## dua 9 -2 Prismatama ## telu 8 -3 Jakarta ## empat 7 -4 Indonesia ## lima 6 -5 Didistribusikan #balikin ke semula rownames(dc)&lt;-NULL dc ## ga gi gu ## 1 10 -1 Indomarco ## 2 9 -2 Prismatama ## 3 8 -3 Jakarta ## 4 7 -4 Indonesia ## 5 6 -5 Didistribusikan "],["memanggil-data-frame.html", "Bab 14 2. Memanggil Data Frame", " Bab 14 2. Memanggil Data Frame head(dc) ## ga gi gu ## 1 10 -1 Indomarco ## 2 9 -2 Prismatama ## 3 8 -3 Jakarta ## 4 7 -4 Indonesia ## 5 6 -5 Didistribusikan str(dc) ## &#39;data.frame&#39;: 5 obs. of 3 variables: ## $ ga: int 10 9 8 7 6 ## $ gi: int -1 -2 -3 -4 -5 ## $ gu: chr &quot;Indomarco&quot; &quot;Prismatama&quot; &quot;Jakarta&quot; &quot;Indonesia&quot; ... # Perhatikan kolom gu langsung diubah jadi factor oleh R # Untuk menghindari hal tersebut bisa dilakukan dengan stringAsFactors=FALSE dc&lt;-data.frame(dc, stringAsFactors=FALSE) dc ## ga gi gu stringAsFactors ## 1 10 -1 Indomarco FALSE ## 2 9 -2 Prismatama FALSE ## 3 8 -3 Jakarta FALSE ## 4 7 -4 Indonesia FALSE ## 5 6 -5 Didistribusikan FALSE #Menampilkan dua baris pertama dari atas dataframes head(dc, n=2) ## ga gi gu stringAsFactors ## 1 10 -1 Indomarco FALSE ## 2 9 -2 Prismatama FALSE #Menampilkan dua baris pertama dari bawah dataframes tail(dc, n=2) ## ga gi gu stringAsFactors ## 4 7 -4 Indonesia FALSE ## 5 6 -5 Didistribusikan FALSE class(dc) ## [1] &quot;data.frame&quot; #Mengakses kolom gu dc$gu ## [1] &quot;Indomarco&quot; &quot;Prismatama&quot; &quot;Jakarta&quot; &quot;Indonesia&quot; ## [5] &quot;Didistribusikan&quot; #Mengakses baris ke 5 kolom ke 3 dc[5,3] ## [1] &quot;Didistribusikan&quot; #Mengakses baris ke 3 sd 5, pada kolom ke 3 dc[3:5,3] ## [1] &quot;Jakarta&quot; &quot;Indonesia&quot; &quot;Didistribusikan&quot; #Mengakses baris ke 3, dari kolom 2 ke kolom 3 dc[3,2:3] ## gi gu ## 3 -3 Jakarta # Mengakses baris ke 3 dan 4, dari kolom 2 ke kolom 3 # Apa bedanya dengan kalau saya buat dc[c(3:4),2:3] z&lt;-dc[3:4,2:3] z ## gi gu ## 3 -3 Jakarta ## 4 -4 Indonesia class(z) ## [1] &quot;data.frame&quot; y&lt;-dc[c(3:4),2:3] y ## gi gu ## 3 -3 Jakarta ## 4 -4 Indonesia class(y) ## [1] &quot;data.frame&quot; #Mengakses semua di baris ke 2 dc[2,] ## ga gi gu stringAsFactors ## 2 9 -2 Prismatama FALSE #Mengakses semua di kolom ke 3 dc[,3] ## [1] &quot;Indomarco&quot; &quot;Prismatama&quot; &quot;Jakarta&quot; &quot;Indonesia&quot; ## [5] &quot;Didistribusikan&quot; k&lt;-dc[[&quot;gu&quot;]] k ## [1] &quot;Indomarco&quot; &quot;Prismatama&quot; &quot;Jakarta&quot; &quot;Indonesia&quot; ## [5] &quot;Didistribusikan&quot; class(k) ## [1] &quot;character&quot; nama&lt;-c(&quot;Rudin&quot;, &quot;Paul&quot;, &quot;Bartle&quot;, &quot;Kolmogorov&quot;, &quot;Smirnov&quot;, &quot;Markov&quot;, &quot;Laplace&quot;, &quot;Cauchy&quot;, &quot;Erdos&quot;, &quot;Dedekind&quot;) umur&lt;-c(34,45,67,23,34,56,87,55,35,39) berat&lt;-c(63.5,77.6,67.1,89.2,56.3,97.5,68.9,88.3,68.5,86.6) profil&lt;-data.frame(nama,umur,berat) profil ## nama umur berat ## 1 Rudin 34 63.5 ## 2 Paul 45 77.6 ## 3 Bartle 67 67.1 ## 4 Kolmogorov 23 89.2 ## 5 Smirnov 34 56.3 ## 6 Markov 56 97.5 ## 7 Laplace 87 68.9 ## 8 Cauchy 55 88.3 ## 9 Erdos 35 68.5 ## 10 Dedekind 39 86.6 #Mengakses satu kolom tertentu pada data frame, menghasilkan tipe data list profil$umur ## [1] 34 45 67 23 34 56 87 55 35 39 #Mengakses dua kolom tertentu pada data frame, menghasilkan data frame lagi profil[c(&quot;nama&quot;,&quot;berat&quot;)] ## nama berat ## 1 Rudin 63.5 ## 2 Paul 77.6 ## 3 Bartle 67.1 ## 4 Kolmogorov 89.2 ## 5 Smirnov 56.3 ## 6 Markov 97.5 ## 7 Laplace 68.9 ## 8 Cauchy 88.3 ## 9 Erdos 68.5 ## 10 Dedekind 86.6 #cari yang beratnya &gt;70 ygberat&lt;-profil[berat&gt;70,] ygberat ## nama umur berat ## 2 Paul 45 77.6 ## 4 Kolmogorov 23 89.2 ## 6 Markov 56 97.5 ## 8 Cauchy 55 88.3 ## 10 Dedekind 39 86.6 #cari yang beratnya standar yakni &lt;70 ygstandar&lt;-profil[berat&lt;70,c(&quot;nama&quot;,&quot;berat&quot;)] ygstandar ## nama berat ## 1 Rudin 63.5 ## 3 Bartle 67.1 ## 5 Smirnov 56.3 ## 7 Laplace 68.9 ## 9 Erdos 68.5 #cari yang tua yakni umur &lt;=45 tahun menggunakan subset yangtua&lt;-subset(profil, umur&gt;45 | umur==45, select=c(&quot;nama&quot;,&quot;umur&quot;)) yangtua ## nama umur ## 2 Paul 45 ## 3 Bartle 67 ## 6 Markov 56 ## 7 Laplace 87 ## 8 Cauchy 55 #cari yang muda yakni umur &lt;45 tapi beratnya juga mesti lebih kecil dari 75 menggunakan subset yangmuda&lt;-subset(profil, umur&lt;45 &amp; berat&lt;75, select=c(&quot;nama&quot;,&quot;umur&quot;,&quot;berat&quot;)) yangmuda ## nama umur berat ## 1 Rudin 34 63.5 ## 5 Smirnov 34 56.3 ## 9 Erdos 35 68.5 nilaismt1&lt;-c(98,87,78,89,80,84,76,65,59,81) nilaismt2&lt;-c(56,67,77,65,68,60,69,78,45,59) nilaismt3&lt;-c(100,89,78,89,88,95,94,74,84,96) profillkp&lt;-data.frame(nama,umur,nilaismt1,nilaismt2,nilaismt3) profillkp ## nama umur nilaismt1 nilaismt2 nilaismt3 ## 1 Rudin 34 98 56 100 ## 2 Paul 45 87 67 89 ## 3 Bartle 67 78 77 78 ## 4 Kolmogorov 23 89 65 89 ## 5 Smirnov 34 80 68 88 ## 6 Markov 56 84 60 95 ## 7 Laplace 87 76 69 94 ## 8 Cauchy 55 65 78 74 ## 9 Erdos 35 59 45 84 ## 10 Dedekind 39 81 59 96 library(reshape) ## ## Attaching package: &#39;reshape&#39; ## The following object is masked from &#39;package:data.table&#39;: ## ## melt ## The following object is masked from &#39;package:dplyr&#39;: ## ## rename ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, smiths ndtf&lt;-stack(profillkp,select=c(&quot;nilaismt1&quot;, &quot;nilaismt2&quot;,&quot;nilaismt3&quot;)) ndtf ## values ind ## 1 98 nilaismt1 ## 2 87 nilaismt1 ## 3 78 nilaismt1 ## 4 89 nilaismt1 ## 5 80 nilaismt1 ## 6 84 nilaismt1 ## 7 76 nilaismt1 ## 8 65 nilaismt1 ## 9 59 nilaismt1 ## 10 81 nilaismt1 ## 11 56 nilaismt2 ## 12 67 nilaismt2 ## 13 77 nilaismt2 ## 14 65 nilaismt2 ## 15 68 nilaismt2 ## 16 60 nilaismt2 ## 17 69 nilaismt2 ## 18 78 nilaismt2 ## 19 45 nilaismt2 ## 20 59 nilaismt2 ## 21 100 nilaismt3 ## 22 89 nilaismt3 ## 23 78 nilaismt3 ## 24 89 nilaismt3 ## 25 88 nilaismt3 ## 26 95 nilaismt3 ## 27 94 nilaismt3 ## 28 74 nilaismt3 ## 29 84 nilaismt3 ## 30 96 nilaismt3 nilaismt3&lt;-c(&quot;Sarjana&quot;,&quot;Magister&quot;,&quot;Doktor&quot;, &quot;Doktor&quot;, &quot;Magister&quot;, &quot;Doktor&quot;,&quot;Magister&quot;,&quot;Sarjana&quot;,&quot;Doktor&quot;,&quot;Magister&quot;) #konversi ke matriks matriksbaru&lt;-as.matrix(profil) matriksbaru ## nama umur berat ## [1,] &quot;Rudin&quot; &quot;34&quot; &quot;63.5&quot; ## [2,] &quot;Paul&quot; &quot;45&quot; &quot;77.6&quot; ## [3,] &quot;Bartle&quot; &quot;67&quot; &quot;67.1&quot; ## [4,] &quot;Kolmogorov&quot; &quot;23&quot; &quot;89.2&quot; ## [5,] &quot;Smirnov&quot; &quot;34&quot; &quot;56.3&quot; ## [6,] &quot;Markov&quot; &quot;56&quot; &quot;97.5&quot; ## [7,] &quot;Laplace&quot; &quot;87&quot; &quot;68.9&quot; ## [8,] &quot;Cauchy&quot; &quot;55&quot; &quot;88.3&quot; ## [9,] &quot;Erdos&quot; &quot;35&quot; &quot;68.5&quot; ## [10,] &quot;Dedekind&quot; &quot;39&quot; &quot;86.6&quot; str(matriksbaru) ## chr [1:10, 1:3] &quot;Rudin&quot; &quot;Paul&quot; &quot;Bartle&quot; &quot;Kolmogorov&quot; &quot;Smirnov&quot; &quot;Markov&quot; ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : NULL ## ..$ : chr [1:3] &quot;nama&quot; &quot;umur&quot; &quot;berat&quot; #Bernavigasi di dalam folder di dalam root #myData &lt;- read.csv(&#39;./Dataset/MRI.csv&#39;) #head(myData) #getwd() "],["wrangling.html", "Bab 15 WRANGLING 15.1 colour 15.2 fill 15.3 group 15.4 shape 15.5 size 15.6 stroke", " Bab 15 WRANGLING Notes: sbse - akronim dari saya belum sempat eksplorasi ## Pemahaman Paket ggplot Ggplot terdiri dari tiga bagian utama : * data di sini data biasanya diambil dari format data frame, bisa berbentuk data frame biasa, tibble ataupun tribble. Namun, di dalam dokumentasi dikatakan bahwa ggplot juga bisa menerima data dalam format lain (sbse). aes merupakan kepanjangan dari aestethic mapping, biasanya disini diterakan sumbu x, sumbu y, dan beberapa elemen lain (dibahas di bagian selanjutnya). * geom_xxx merupakan bagian terakhir dari ggplot, di sini tidak harus geom_point, ada banyak bentuk yang bisa digunakan. geom_point( mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE ) untuk bagian aesnya r, ggplot memahami: x y alpha colour fill group shape size stroke 15.1 colour Ingat nulisnya colour versi british bukan versi american english color. Colour yang tersedia adalah sebagai berikut: 15.2 fill 15.3 group 15.4 shape 15.5 size 15.6 stroke "],["grouping.html", "Bab 16 Grouping", " Bab 16 Grouping for (apaini in 9:23) { print(apaini) } ## [1] 9 ## [1] 10 ## [1] 11 ## [1] 12 ## [1] 13 ## [1] 14 ## [1] 15 ## [1] 16 ## [1] 17 ## [1] 18 ## [1] 19 ## [1] 20 ## [1] 21 ## [1] 22 ## [1] 23 print (1:10) ## [1] 1 2 3 4 5 6 7 8 9 10 makanan&lt;-c(&quot;jagung&quot;, &quot;bewan&quot;, &quot;ketela pohon&quot;, &quot;bengkoang&quot;, &quot;pisang&quot;, &quot; &quot;) makanan_panjangnya&lt;-rep(NA, length(makanan)) makanan_panjangnya ## [1] NA NA NA NA NA NA names(makanan_panjangnya)&lt;-makanan makanan_panjangnya ## jagung bewan ketela pohon bengkoang pisang ## NA NA NA NA NA NA for (a in makanan){ makanan_panjangnya[a]&lt;-nchar(a) } makanan_panjangnya ## jagung bewan ketela pohon bengkoang pisang ## 6 5 12 9 6 1 ikan&lt;-c(&quot;patin&quot;, &quot;nila&quot;, &#39;lele&#39;, &quot;mujair&quot;, &quot;sotong&quot;) for (i in 1:5) { print(paste(&quot;Ikan&quot;, i, &quot;namanya&quot;, ikan[i])) } ## [1] &quot;Ikan 1 namanya patin&quot; ## [1] &quot;Ikan 2 namanya nila&quot; ## [1] &quot;Ikan 3 namanya lele&quot; ## [1] &quot;Ikan 4 namanya mujair&quot; ## [1] &quot;Ikan 5 namanya sotong&quot; ikan&lt;-c(nama=c(&quot;patin&quot;, &quot;nila&quot;, &#39;lele&#39;, &quot;mujair&quot;, &quot;sotong&quot;), habitat=c(&quot;laut&quot;, &quot;tawar&quot;,&quot;tawar&quot;,&quot;tawar&quot;,&quot;laut&quot; )) for (i in 1:5) { print(paste(&quot;Ikan&quot;, i, &quot;namanya&quot;, ikan[c(1,i)], &quot;hidupnya di&quot;, ikan[c(2,i)])) } ## [1] &quot;Ikan 1 namanya patin hidupnya di nila&quot; ## [2] &quot;Ikan 1 namanya patin hidupnya di patin&quot; ## [1] &quot;Ikan 2 namanya patin hidupnya di nila&quot; ## [2] &quot;Ikan 2 namanya nila hidupnya di nila&quot; ## [1] &quot;Ikan 3 namanya patin hidupnya di nila&quot; ## [2] &quot;Ikan 3 namanya lele hidupnya di lele&quot; ## [1] &quot;Ikan 4 namanya patin hidupnya di nila&quot; ## [2] &quot;Ikan 4 namanya mujair hidupnya di mujair&quot; ## [1] &quot;Ikan 5 namanya patin hidupnya di nila&quot; ## [2] &quot;Ikan 5 namanya sotong hidupnya di sotong&quot; ikan[c(2,1)] ## nama2 nama1 ## &quot;nila&quot; &quot;patin&quot; as.numeric(TRUE) ## [1] 1 as.numeric(FALSE) ## [1] 0 print(1&gt;1) ## [1] FALSE print(1&gt;0) ## [1] TRUE print(1&gt;2) ## [1] FALSE print(1&gt;=1) ## [1] TRUE print(5!=1) ## [1] TRUE toCheck&lt;-1 if(toCheck==1){ print(&quot;Hello&quot;) } ## [1] &quot;Hello&quot; check.bool&lt;-function(x) { if(x==1) { print(&quot;Hello&quot;) }else if (x==0){ print(&quot;goodbye&quot;) }else print(&quot;confused&quot;) } check.bool(TRUE) ## [1] &quot;Hello&quot; check.bool(0) ## [1] &quot;goodbye&quot; check.bool(&quot;Mongket&quot;) ## [1] &quot;confused&quot; gunakan_switch&lt;-function(x) { switch(x, &quot;1&quot;=&quot;Yutub&quot;, &quot;2&quot;=&quot;Twitter&quot;, &quot;3&quot;=&quot;Facebook&quot;, &quot;4&quot;=&quot;Instagram&quot;, &quot;5&quot;=&quot;VK&quot;, )} gunakan_switch(&quot;3&quot;) ## [1] &quot;Facebook&quot; gunakan_switch(&quot;5&quot;) ## [1] &quot;VK&quot; The R software provides access to the uniform distribution by the dunif(), punif(), qunif() and runif() functions. Apply the help() function on these functions for further information. # generate n random numbers between the default values of 0 and 1 sdf&lt;-runif (25, min = 0, max = 100) sdf ## [1] 97.7552124 88.5085043 74.7113840 9.9660231 6.6144352 77.6326959 ## [7] 93.6328252 46.3840602 10.4600019 28.1796802 0.3072537 5.6553908 ## [13] 8.8009696 55.1530010 51.9221288 39.4921771 55.1396610 82.3262505 ## [19] 76.3016614 22.0393053 93.4048307 36.4417480 19.0471082 61.4801904 ## [25] 91.3489739 hist(sdf, freq = FALSE, xlab = &#39;x&#39;, density = 10) random_dgn_kembalian &lt;- sample(1:10, 7, replace=T) random_dgn_kembalian ## [1] 9 2 10 2 6 4 5 random_tnp_kembalian &lt;- sample(1:10, 5, replace=F) random_tnp_kembalian ## [1] 4 9 3 10 2 sample(state.name, 10) ## [1] &quot;Minnesota&quot; &quot;Massachusetts&quot; &quot;Delaware&quot; &quot;Wyoming&quot; ## [5] &quot;Virginia&quot; &quot;Connecticut&quot; &quot;Kansas&quot; &quot;South Dakota&quot; ## [9] &quot;Arkansas&quot; &quot;Nevada&quot; # paste together string a &amp; b paste (a, b) x&lt;-c(&quot;ubi&quot;) y&lt;-c(&quot;kayu&quot;) paste(x,y) ## [1] &quot;ubi kayu&quot; x&lt;-c(&quot;ubi&quot;,&quot;rambat&quot;) y&lt;-c(&quot;kayu&quot;) paste(x,y) ## [1] &quot;ubi kayu&quot; &quot;rambat kayu&quot; x&lt;-c(&quot;rambat&quot;) y&lt;-c(&quot;pohon&quot;,&quot;kayu&quot;) paste(x,y) ## [1] &quot;rambat pohon&quot; &quot;rambat kayu&quot; x&lt;-c(&quot;rambat&quot;, 1, 2, TRUE) y&lt;-c(&quot;pohon&quot;,&quot;kayu&quot;, 2, 4) paste(x,y) ## [1] &quot;rambat pohon&quot; &quot;1 kayu&quot; &quot;2 2&quot; &quot;TRUE 4&quot; # paste multiple strings with a separating character paste (&quot;Kenapa&quot;, &quot;Kamu&quot;, &quot;Terlihat&quot;, &quot;Lelah&quot;, &quot;Hayati&quot;, sep = &quot;?&quot;) ## [1] &quot;Kenapa?Kamu?Terlihat?Lelah?Hayati&quot; # paste multiple strings with a separating character paste (&quot;Kenapa&quot;, 1:5, sep = &quot; v1.&quot;) ## [1] &quot;Kenapa v1.1&quot; &quot;Kenapa v1.2&quot; &quot;Kenapa v1.3&quot; &quot;Kenapa v1.4&quot; &quot;Kenapa v1.5&quot; musuh&lt;-c(hewan=c(&quot;semut&quot;,&quot;belalang&quot;,&quot;lipas&quot;),elemen=c(&quot;udara&quot;,&quot;api&quot;)) length(musuh) ## [1] 5 nchar(musuh) ## hewan1 hewan2 hewan3 elemen1 elemen2 ## 5 8 5 5 3 streets &lt;- c (&quot;Framboise&quot;, &quot;Yannick&quot;, &quot;Guillaume&quot;, &quot;Peter&quot;, &quot;James&quot;, &quot;Andreas Syaloom Kurniawan&quot;) # default abbreviations abbreviate (streets abbreviate(streets) ## Framboise Yannick Guillaume ## &quot;Frmb&quot; &quot;Ynnc&quot; &quot;Gllm&quot; ## Peter James Andreas Syaloom Kurniawan ## &quot;Petr&quot; &quot;Jams&quot; &quot;AnSK&quot; sort(streets) ## [1] &quot;Andreas Syaloom Kurniawan&quot; &quot;Framboise&quot; ## [3] &quot;Guillaume&quot; &quot;James&quot; ## [5] &quot;Peter&quot; &quot;Yannick&quot; sort(streets, decreasing = TRUE) ## [1] &quot;Yannick&quot; &quot;Peter&quot; ## [3] &quot;James&quot; &quot;Guillaume&quot; ## [5] &quot;Framboise&quot; &quot;Andreas Syaloom Kurniawan&quot; isi &lt;- c(&quot;Serum&quot;, &quot;Vaksin&quot;, &quot;Antibiotik&quot;, &quot;Tablet&quot;) is.element (&quot;Serum&quot;, isi) ## [1] TRUE is.element (&quot;Ser&quot;, isi) ## [1] FALSE &quot;Vaksin&quot; %in% isi ## [1] TRUE &quot;Vak&quot; %in% isi ## [1] FALSE isi_2 &lt;- c (&quot;Kucing&quot;, &quot;Anjing&quot;, &quot;Burung&quot;) isi_3 &lt;- c (&quot;Belut&quot;, &quot;Ular&quot;, &quot;Buaya&quot;) isi_4 &lt;- c (&quot;Kucing&quot;, &quot;Anjing&quot;, &quot;Burung&quot;) isi_5 &lt;- c (&quot;Burung&quot;,&quot;Kucing&quot;, &quot;Anjing&quot;) isi_6 &lt;- c (&quot;Kucing&quot;, &quot;Anjing&quot;, &quot;Burung&quot;,&quot;YuyuKangkang&quot;) identical(isi_2,isi_4) ## [1] TRUE identical(isi_2,isi_5) ## [1] FALSE identical(isi_2,isi_3) ## [1] FALSE setequal(isi_2,isi_4) ## [1] TRUE setequal(isi_2,isi_5) ## [1] TRUE setequal(isi_2,isi_3) ## [1] FALSE print(setdiff(isi_6,isi_2)) ## [1] &quot;YuyuKangkang&quot; print(setdiff(isi_2,isi_6)) ## character(0) intersect(isi_2,isi_6) ## [1] &quot;Kucing&quot; &quot;Anjing&quot; &quot;Burung&quot; intersect(isi_6,isi_2) ## [1] &quot;Kucing&quot; &quot;Anjing&quot; &quot;Burung&quot; union(isi_6,isi_3) ## [1] &quot;Kucing&quot; &quot;Anjing&quot; &quot;Burung&quot; &quot;YuyuKangkang&quot; &quot;Belut&quot; ## [6] &quot;Ular&quot; &quot;Buaya&quot; # remove whitespaces on the left side library (stringr) text &lt;- c (&quot;Text &quot;, &quot; with&quot;, &quot; whitespace &quot;, &quot; on&quot;, &quot;both &quot;, &quot; sides &quot;) str_trim(text, side = &quot;left&quot;) ## [1] &quot;Text &quot; &quot;with&quot; &quot;whitespace &quot; &quot;on&quot; &quot;both &quot; ## [6] &quot;sides &quot; str_trim(text, side = &quot;right&quot;) ## [1] &quot;Text&quot; &quot; with&quot; &quot; whitespace&quot; &quot; on&quot; &quot;both&quot; ## [6] &quot; sides&quot; str_trim(text, side = &quot;both&quot;) ## [1] &quot;Text&quot; &quot;with&quot; &quot;whitespace&quot; &quot;on&quot; &quot;both&quot; ## [6] &quot;sides&quot; banyak_deh&lt;-c(&#39;Anjing&#39;,&#39;Kucing&#39;,&#39;Anjing&#39;,&#39;Burung&#39;,&#39;YuyuKangkang&#39;,&#39;Belut&#39;,&#39;Burung&#39;,&#39;Burung&#39;,&#39;Ular&#39;,&#39;Buaya&#39;,&#39;Anjing&#39;,&#39;Burung&#39;,&#39;YuyuKangkang&#39;,&#39;Belut&#39;,&#39;Ular&#39;) table(banyak_deh) ## banyak_deh ## Anjing Belut Buaya Burung Kucing Ular ## 3 2 1 4 1 2 ## YuyuKangkang ## 2 akumulasi&lt;-table(banyak_deh) akumulasi[&quot;Burung&quot;] ## Burung ## 4 akumulasi[&quot;YuyuKangkang&quot;] ## YuyuKangkang ## 2 tabelin_yuk&lt;-as.data.frame(akumulasi) tabelin_yuk ## banyak_deh Freq ## 1 Anjing 3 ## 2 Belut 2 ## 3 Buaya 1 ## 4 Burung 4 ## 5 Kucing 1 ## 6 Ular 2 ## 7 YuyuKangkang 2 tmbh_sum&lt;-addmargins(akumulasi,1) tmbh_sum ## banyak_deh ## Anjing Belut Buaya Burung Kucing Ular ## 3 2 1 4 1 2 ## YuyuKangkang Sum ## 2 15 summary(tabelin_yuk) ## banyak_deh Freq ## Anjing :1 Min. :1.000 ## Belut :1 1st Qu.:1.500 ## Buaya :1 Median :2.000 ## Burung :1 Mean :2.143 ## Kucing :1 3rd Qu.:2.500 ## Ular :1 Max. :4.000 ## YuyuKangkang:1 #setwd(&quot;D://OneDrive - Universitas Terbuka//00 LABORATORIUM//Modul R//Dataset//Zuur_RBook&quot;) #veg&lt;-read.table(file=&quot;Vegetation2.txt&quot;, header=TRUE) #head(veg, n=5) #names(veg) #str(veg) #m&lt;-mean(veg$R) #m #tapply(veg$R, veg$Transect, mean) #sapply #lapply "],["tidyverse.html", "Bab 17 Tidyverse 17.1 colour 17.2 fill 17.3 group 17.4 shape 17.5 size 17.6 stroke", " Bab 17 Tidyverse #install.packages(&quot;tidyverse&quot;) #library(tidyverse) #myTib&lt;-tibble(x=1:4, # y=c(&quot;London&quot;,&quot;Paris&quot;,&quot;Madrid&quot;,&quot;Lisbon&quot;)) #myTib #class(myTib) #ty&lt;-data.frame(x=1:5, y=c(&quot;Airbus&quot;, &quot;Boeing&quot;, &quot;Tupolev&quot;, &quot;Ilyushin&quot;, &quot;Bombardier&quot;)) #ty #class(ty) #tyToTib&lt;-as_tibble(ty) #tyToTib #class(tyToTib) Notes: sbse - akronim dari saya belum sempat eksplorasi # Pemahaman Paket ggplot Ggplot terdiri dari tiga bagian utama : * data di sini data biasanya diambil dari format data frame, bisa berbentuk data frame biasa, tibble ataupun tribble. Namun, di dalam dokumentasi dikatakan bahwa ggplot juga bisa menerima data dalam format lain (sbse). aes merupakan kepanjangan dari aestethic mapping, biasanya disini diterakan sumbu x, sumbu y, dan beberapa elemen lain (dibahas di bagian selanjutnya). * geom_xxx merupakan bagian terakhir dari ggplot, di sini tidak harus geom_point, ada banyak bentuk yang bisa digunakan. geom_point( mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE ) untuk bagian aesnya r, ggplot memahami: x y alpha colour fill group shape size stroke 17.1 colour Ingat nulisnya colour versi british bukan versi american english color. Colour yang tersedia adalah sebagai berikut: 17.2 fill 17.3 group 17.4 shape 17.5 size 17.6 stroke head(diamonds) diamonds_c1&lt;-ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = clarity)) + geom_point() diamonds_c1 diamonds_c2 &lt;- ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, colour = clarity)) diamonds_c2 diamonds_c3 &lt;-ggplot()+ geom_point( data=diamonds, mapping=aes(x = carat, y = price, colour = clarity) ) diamonds_c3 summary(diamonds_c1) summary(diamonds_c2) summary(diamonds_c3) Tiga komponen dasar dalam pembuatan grafik yaitu: * Data, yaitu data berisi informasi yang akan dibuat grafik * Mapping, yaitu penentuan variabel/kolom yang akan ditampilkan dalam grafik * Geometries, yaitu representasi visual dari variabel/kolom dalam grafik qplot(, data = , geom = ) #ggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + # &lt;GEOM_FUNCTION&gt;() #ggplot(data = &lt;DATA&gt;) + # &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) #ggplot() + # &lt;GEOM_FUNCTION&gt;(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;) Delapan Komponen Dalam Grafik Selain tiga komponen dasar yang sebelumnya telah disinggung, dalam konsep Grammar of Graphic terdapat lima komponen utama lainnya yang berperan penting dalam pembuatan sebuah grafik. Berikut merupakan delapan komponen dalam grafik: Data Mapping Statistic Scales Geometries Facets Coordinates Theme df&lt;-data.frame( x=c(3,1,5), y=c(2,4,6), label=c(a,b,c) ) p&lt;-ggplot(df,aes(x,y,label=label))+ labs(x=NULL, y=NULL)+ theme(plot.title=element_text(size=12)) p+geom_point()+ggtitle(point) &lt;!--chapter:end:14-ggplot.Rmd--&gt; --- title: An R Markdown document converted from &quot;TanggalWaktu.ipynb&quot; output: html_document --- # Tanggal dan Waktu di R *** | Code | Value | | --- | --- | | %d | Day of the month (number) | | %m | Month (decimal number)| | %b | Month (abbreviated)| | %B | Month (full name) | | %y | Year (2 digit)| | %Y | Year (4 digit) | * Date objects are stored as the number of days since January 1, 1970, using negative numbers for earlier dates. * The __as.numeric__ function can be used to convert a __Date__ object to its internal form ```r #as.Date(&quot;2020/04/15&quot;) as.Date(&quot;2020-04-15&quot;) ## [1] &quot;2020-04-15&quot; #as.Date(&quot;2020/15/04&quot;) as.Date(&quot;2020/15/04&quot;, format=&#39;%Y/%d/%m&#39;) ## [1] &quot;2020-04-15&quot; as.Date(&quot;2020 August, 04&quot;, format=&#39;%Y %B, %d&#39;) ## [1] &quot;2020-08-04&quot; tanggal&lt;-as.Date(&quot;May 30, 93&quot;, format=&#39;%B %d, %y&#39;) tanggal ## [1] &quot;1993-05-30&quot; konversi&lt;-as.numeric(tanggal) konversi ## [1] 8550 tanggal1&lt;-as.Date(&quot;30/05/1993&quot;, format=&#39;%d/%m/%Y&#39;) tanggal2&lt;-as.Date(&quot;18/03/2021&quot;, format=&#39;%d/%m/%Y&#39;) tanggal1 ## [1] &quot;1993-05-30&quot; tanggal2 ## [1] &quot;2021-03-18&quot; tanggal2-tanggal1 ## Time difference of 10154 days difftime(tanggal2, tanggal1, units=&quot;weeks&quot;) ## Time difference of 1450.571 weeks difftime(tanggal2, tanggal1, units=&quot;hours&quot;) ## Time difference of 243696 hours h&lt;-tanggal2-tanggal1 u&lt;-h/365 attr(u, &quot;units&quot;)=&quot;years&quot; u ## Time difference of 27.81918 years #https://www.youtube.com/watch?v=IbvBbyg-Nz4 "],["null-dan-na.html", "Bab 18 NULL dan NA", " Bab 18 NULL dan NA NULL represents the null or an empty object in R. NA represents a missing value in R. NA can be updated in R by vectors, list and other R objects whereas NULL cannot be coerced. typeof(NULL) ## [1] &quot;NULL&quot; length(NULL) ## [1] 0 is.null(1) ## [1] FALSE #c() nu&lt;-c(45,33,42,NA,12,12,22,11) nu ## [1] 45 33 42 NA 12 12 22 11 mean(nu) ## [1] NA #Rata-rata bila na dihilangkan mean(nu, na.rm=T) ## [1] 25.28571 ne&lt;-c(45,33,42,NULL,12,12,22,11) ne ## [1] 45 33 42 12 12 22 11 mean(ne) ## [1] 25.28571 u&lt;-NULL v&lt;-NA u ## NULL v ## [1] NA length(u) ## [1] 0 length(v) ## [1] 1 "]]
